// Blink an LED with a 100 us half period (5 kHz)
//
// Exhibits 1.26 us jitter
//
// Edit the ledPin number to taste

$$$
volatile uint32_t dummy; // to avoid optimizing it away

ssm_value_t waste_time(ssm_value_t t) {
  uint32_t d = ssm_unmarshal(t);
  for (int i = d % 13 ; i > 0 ; --i )
    dummy += i;
  return ssm_marshal(dummy);
}
$$$

extern waste_time : Int -> Int

main _ =
  let ledPin = 14 // For my RP2040 Zero; adjust to taste
  let (_, led) = rp2040_io_init (5, 0) (ledPin, 1)
  let timer = new ()
  let v = new 0
  loop
    after us 10, led <- 1 - deref led
    after us 100, timer <- ()
    waste_time (deref v)
    v <- deref v + 1
    wait timer

us t = t * 16 // Convert to 16 MHz timebase

// Base input pin and count; Base output pin and count
extern rp2040_io_init : (Int, Int) -> (Int, Int) -> (&Int, &Int)
