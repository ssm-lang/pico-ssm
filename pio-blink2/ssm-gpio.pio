; Configuration:
;
; Each output state machine can read from/write to up to 32 GPIO pins at once,
; using the in and out programs. These pins must be consecutive.
;
; Input program
;
; Between iterations:
; - X holds previous GPIO value
; - Y holds counter (decremented every 6 instructions)
; - OSR is used to back up Y between cmp and update
;
; This program is pipelined to increase the frequency at which the counter is
; updated (which also determines the granularity of timestamping).
;
; There are two phases of the pipeline. The cmp phase polls the GPIO pins,
; and loops every 6 instructions when there are no changes on the GPIO pins.
; Thus, the cmp phase decrements the counter once every iteration.
;
; The update phase is triggered when changes are found on the GPIO pins, which
; writes the GPIO input and then the current counter to the FIFO. It takes 12
; instructions to go through the cmp then update phase, so it decrements the
; counter twice before returning to cmp.
;
; Because jmp y--, <DEST> will fall throuh when y is zero, we add an additional
; "spillover" block for the cmp phase which does the exact same thing as cmp
; (we can't naively jump back because the instructions will be out of phase).
;
; Due to the fact that the update phase takes twice as long as the cmp phase,
; if the GPIO input rapidly changes twice, the second change will be delayed
; by 6 instructions worth of time.
;
; FIFO protocol: (gpio_in ; input_time)
;                --------- time ------->
;
; TODO: determine IRQ number (and set it up??)
;
; NOTE: The SDK documentation (3.5.6.3) notes that GPIO pins are equipped with
; a 2-flipflop synchronizer, which adds 2 cycles of latency. This is less than
; the 6-cycle clock period of this input program.

; Interrupt used to communicate the presence of new input data on
; the input SM's RX FIFO
.define public SSM_INPUT_IRQ_NUM 0

; Internal IRQ number used to communicate between output PIO state machines
.define PUBLIC SSM_OUT_SET_IRQ 4


.program ssm_input
.define IN_PINS 16
.define NULL_PINS (32 - IN_PINS)
    pull                ; Read initial counter from TX FIFO
    mov y, osr          ; \ldots into Y
pins_patch_0:
    in pins, IN_PINS    ; Read initial GPIO pins state
    in null, NULL_PINS  ; \ldots plus additional null values
    mov x, isr          ; \ldots into X

.wrap_target
cmp:
    jmp y--, decr1      ; Decrement Y
decr1:
    mov osr, y          ; Back up counter from Y
pins_patch_1:
    in pins, IN_PINS    ; Read GPIO pins state
    in pins, NULL_PINS  ; \ldots plus additional null values
    mov y, isr          ; \ldots into Y
    jmp x!=y, event     ; Jump if state changed
    mov y, osr          ; Restore counter to Y
    jmp cmp             ; Goto cmp

event:
    mov x, isr          ; Set prev to cur value
    push noblock        ; \ldots and push to RX FIFO
    mov isr, osr        ; Move counter to ISR
    push noblock        ; \ldots and push to RX FIFO
    irq 0               ; Notify CPU of new event
    mov y, osr          ; Restore counter to Y
    jmp y--, cmp [3]    ; Decrement Y, stall for 2 cycles
.wrap

.define public PINS_PATCH_0 pins_patch_0
.define public PINS_PATCH_1 pins_patch_1




;
;
; Interruptible output counter alarm (8 cycles per tick)
;
;

; Interruptible output counter (8 cycles per tick)
.program ssm_output_alarm
    pull noblock                ; Pull initial counter from FIFO
    mov y, osr                  ; Initialize counter variable
                                ; Let block spill into resume block
cont:
    nop
.wrap_target
    jmp y--, check [3]
check:
    pull noblock                ; OSR <- FIFO else X
    mov x, osr                  ; Overwrite X if new
    jmp x!=y, cont              ; Jump if counter not yet reached
    irq nowait SSM_OUT_SET_IRQ  ; Interrupt ssm_output_out
.wrap

;
;
; Output program
;
; Read data to output from input FIFO (typically triggered from outside);
; Wait for an interrupt from ssm_output_alarm
; then transfer data to output pins
;
;


; Latching output emitter (interrupt-driven)
.program ssm_output_gpio
    in pins, 32
    mov osr, isr                ; Initialize OSR to current GPIO state
.wrap_target
    wait 1 irq SSM_OUT_SET_IRQ  ; Wait for interrupt from ssm_output_ctr
    out pins, 32                ; GPIO pins <- OSR
.wrap
