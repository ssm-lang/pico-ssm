; Just toggle a GPIO pin up and down, to establish clock rate
.program mypio
.side_set 2
    set x, 0        side 0b00
.wrap_target
flippy:
    nop             side 0b01
flip:
    jmp x--, flippy side 0b11
    jmp flop        side 0b01

floppy:
    nop             side 0b00
flop:
    jmp x--, floppy side 0b10
    jmp flip        side 0b00
.wrap

% c-sdk {

#ifndef PICO_DEFAULT_LED_PIN
#error This program requires a board with a regular LED
#endif

static inline int mypio_program_init(PIO pio) {
    if (!pio_can_add_program(pio, &mypio_program))
        // Can't add program
        return -1;

    uint offset = pio_add_program(pio, &mypio_program);

    int sm = pio_claim_unused_sm(pio, false);
    if (sm < 0)
        // No state machines available at pio
        return -1;

    // Obtain default PIO configuration
    pio_sm_config c = mypio_program_get_default_config(offset);

    // Run with no clock divider, i.e., at full speed
    sm_config_set_clkdiv_int_frac(&c, 1, 0);

    // NOTE: PICO_DEFAULT_LED_PIN is 25
    // so this program will toggle 25 and 26
    sm_config_set_sideset_pins(&c, PICO_DEFAULT_LED_PIN);
    sm_config_set_sideset(&c, 2, false, false);

    pio_gpio_init(pio, PICO_DEFAULT_LED_PIN);
    pio_gpio_init(pio, PICO_DEFAULT_LED_PIN + 1);

    pio_sm_set_pindirs_with_mask(pio, sm, 0xffffffff, ((1u << 2) - 1) << PICO_DEFAULT_LED_PIN);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    return sm;
}
%}
