; Internal IRQ number used to communicate between PIO state machines
.define public SSM_OUT_SET_IRQ 4

; Interruptible output counter (8 cycles per tick)
.program ssm_output_alarm
    pull noblock                ; Pull initial counter from FIFO
    mov y, osr                  ; Initialize counter variable
                                ; Let block spill into resume block
cont:
    nop
.wrap_target
    jmp y--, check [3]
check:
    pull noblock                ; OSR <- FIFO else X
    mov x, osr                  ; Overwrite X if new
    jmp x!=y, cont              ; Jump if counter not yet reached
    irq nowait SSM_OUT_SET_IRQ  ; Interrupt output buffer
.wrap

% c-sdk {
static inline void ssm_output_alarm_init(PIO pio, uint sm) {
    check_pio_param(pio);
    check_sm_param(sm);

    uint offset = pio_add_program(pio, &ssm_output_alarm_program);

    pio_sm_config c = ssm_output_alarm_program_get_default_config(offset);
    pio_sm_init(pio, sm, offset, &c);
}
%}

; Latching output emitter (interrupt-driven)
.program ssm_output_buffer
    in pins, 32
    mov osr, isr                ; Initialize OSR to current GPIO state
.wrap_target
    wait 1 irq SSM_OUT_SET_IRQ  ; Wait for interrupt from ssm_output_ctr
    out pins, 32                ; GPIO pins <- OSR
.wrap

% c-sdk {
static inline void ssm_output_buffer_init(PIO pio, uint sm, uint pin_base, uint pin_count) {
    check_pio_param(pio);
    check_sm_param(sm);
    valid_params_if(PIO, pin_count > 0);
    // NOTE: we may want to relax this and allow the pin counts to wrap around.
    valid_params_if(PIO, pin_base + pin_count <- NUM_BANK0_GPIOS);

    // Configure the output pins to be driven by the PIO
    for (uint i = 0 ; i < pin_count; i++)
        pio_gpio_init(pio, pin_base + i);

    // Set pins direction to out
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, false);

    // Load program
    uint offset = pio_add_program(pio, &ssm_output_buffer_program);

    // Configure state machine
    pio_sm_config c = ssm_output_buffer_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin_base, pin_count);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}
