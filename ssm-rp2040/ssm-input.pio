; SSM input capture
;
; Register usage:
; - X holds the previous value
; - Y holds counter (decremented every 8 instructions)
; - ISR is clobbered every time we read from GPIO pins
; - OSR backs up counter when Y is used for storing fresh GPIO pin read
;
; There are two phases of the pipeline. The cmp phase polls the GPIO pins,
; and loops every 8 instructions when there are no changes on the GPIO pins.
; Thus, the cmp phase decrements the counter once every iteration.
;
; The event phase is triggered when changes are found on the GPIO pins, which
; writes the GPIO input and then the current counter to the FIFO. It takes 16
; instructions to go through the cmp then update phase, so it decrements the
; counter twice before returning to cmp.
;
; Because the cmp+update phases take twice as long as the cmp phase alone, if
; the GPIO input rapidly changes twice, the second event is delayed by 1 count.
;
; FIFO protocol: (gpio_in ; input_time)
;                --------- time ------->
;
; NOTE: The SDK documentation (3.5.6.3) notes that GPIO pins are equipped with
; a 2-flipflop synchronizer, which adds 2 cycles of latency. This is less than
; the 6-cycle clock period of this input program.

.define public SSM_INPUT_IRQ_NUM 0

.program ssm_input
.define IN_PINS 2
.define NULL_PINS (32 - IN_PINS)
    pull                ; Read initial counter from TX FIFO
    mov y, osr          ; \ldots into Y
pins_patch_0:
    in pins, IN_PINS    ; Read initial GPIO pins state
    in null, NULL_PINS  ; \ldots plus additional null values
    mov x, isr [13]     ; Compensate for phase wrt ssm-output

.wrap_target
cmp:
    jmp y--, decr1      ; Decrement Y
decr1:
    mov osr, y          ; Back up counter from Y
pins_patch_1:
    in pins, IN_PINS    ; Read GPIO pins state
    in pins, NULL_PINS  ; \ldots plus additional null values
    mov y, isr          ; \ldots into Y
    jmp x!=y, event     ; Jump if state changed
    mov y, osr          ; Restore counter to Y
    jmp cmp             ; Goto cmp

event:
    mov x, isr          ; Set prev to cur value
    push noblock        ; \ldots and push to RX FIFO
    mov isr, osr        ; Move counter to ISR
    push noblock        ; \ldots and push to RX FIFO
    irq 0               ; Notify CPU of new event
    mov y, osr          ; Restore counter to Y
    jmp y--, cmp [3]    ; Decrement Y, stall for 2 cycles
.wrap

.define public PINS_PATCH_0 pins_patch_0
.define public PINS_PATCH_1 pins_patch_1

% c-sdk {
static inline void ssm_input_init(PIO pio, uint sm, uint pin_base, uint pin_count) {
    check_pio_param(pio);
    check_sm_param(sm);
    valid_params_if(PIO, pin_count > 0);
    // NOTE: we may want to relax this and allow the pin counts to wrap around.
    valid_params_if(PIO, pin_base + pin_count <- NUM_BANK0_GPIOS);

    // Set pins direction to in
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, false);

    // Load program, and patch it according to the number of input pins
    uint offset = pio_add_program(pio, &ssm_input_program);
    uint null_count = 32 - pin_count;
    uint pin_in_instr = pio_encode_in(pio_pins, pin_count);
    uint null_in_instr = (null_count > 0) ? pio_encode_in(pio_null, null_count) : pio_encode_nop();

    pio->instr_mem[offset + ssm_input_PINS_PATCH_0] = pin_in_instr;
    pio->instr_mem[offset + ssm_input_PINS_PATCH_0 + 1] = null_in_instr;
    pio->instr_mem[offset + ssm_input_PINS_PATCH_1] = pin_in_instr;
    pio->instr_mem[offset + ssm_input_PINS_PATCH_1 + 1] = null_in_instr;

    // Configure the state machine
    pio_sm_config c = ssm_input_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin_base);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}
